<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ClassFile-JSR202</title>
      <link href="/2018/jsr-classfile/"/>
      <url>/2018/jsr-classfile/</url>
      <content type="html"><![CDATA[<p>字节码文件作为JVM语言编译后的产物，在<a href="https://jcp.org/en/jsr/detail?id=202" target="_blank" rel="noopener">JSR202</a>中详细描述了字节码文件结构等。字节码生命周期包括加载、连接（验证/准备/解析）、初始化、使用和卸载。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>一个字节码文件只包含单个的<code>class</code>或<code>interface</code>的定义信息，不是所有的字节码文件都要求在存储在文件中（如通过<code>ClassLoader</code>生成的<code>class</code>）。一个字节码文件由8位的字节流组成，16、32、64位分别通过连续读2、4、8次8位字节构成，字节码采用大端（<code>big-endian</code>，高位在前、低位在后）存储。u1-无符号的1字节，u2-无符号的2字节，u4-无符号的四字节。字节码文件采用C风格的<code>struct</code>来书写伪代码，为避免混乱，描述字节码结构的的被称为<code>items</code>，相邻的<code>items</code>按照顺序中间无填充任何空白存储在字节码文件中，零或多个变长的<code>items</code>组成了<code>table</code>（即不能通过索引获得某个<code>items</code>在<code>table</code>的字节偏移量）</p><p>一个字节码文件由以下结构组成<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">ClassFile</span> &#123;</span><br><span class="line">    <span class="attribute">u4</span>                  magic;</span><br><span class="line">    <span class="attribute">u2</span>                  minor_version;</span><br><span class="line">    <span class="attribute">u2</span>                  major_version;</span><br><span class="line">    <span class="attribute">u2</span>                  constant_pool_count;</span><br><span class="line">    <span class="attribute">cp_info</span>             constant_pool[constant_pool_count-<span class="number">1</span>];</span><br><span class="line">    <span class="attribute">u2</span>                  access_flags;</span><br><span class="line">    <span class="attribute">u2</span>                  this_class;</span><br><span class="line">    <span class="attribute">u2</span>                  super_class;</span><br><span class="line">    <span class="attribute">u2</span>                  interfaces_count;</span><br><span class="line">    <span class="attribute">u2</span>                  interfaces[interfaces_count];</span><br><span class="line">    <span class="attribute">u2</span>                  fields_count;</span><br><span class="line">    <span class="attribute">field_info</span>          fields[fields_count];</span><br><span class="line">    <span class="attribute">u2</span>                  methods_count;</span><br><span class="line">    <span class="attribute">method_info</span>         methods[methods_count];</span><br><span class="line">    <span class="attribute">u2</span>                  attributes_count;</span><br><span class="line">    <span class="attribute">attribute_info</span>      attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>magic</code>：该项提供魔数来识别文件格式是否是字节码文件格式，其值必须是<code>OxCAFEBABE</code></li><li><code>minor_version</code>,<code>major_version</code>：分别代表字节码文件的主次版本号，主次版本号一起确定字节码文件格式的版本号<ul><li><code>constant_pool_count</code>： <code>constant_pool_count</code>是<code>constant_pool[]</code>table的条目数加1。<code>constant_pool</code>的索引有效值是大于0且小于<code>constant_pool_count</code></li></ul></li><li><p><code>constant_pool[]</code>：<code>constant_pool[]</code>用一个<code>table</code>结构代表所有的字符串常量（类名、接口名、字段名和在<code>ClassFile</code>结构及其子结构中出现的常量）。每个<code>items</code>入口由第一个<code>tag</code>标示出。<code>constant_pool[]</code>的索引从1到<code>constant_pool_count - 1</code></p><ul><li><p><code>access_flags</code>：标志的掩码(mask,每一个access_flag可以相加)，用来表示访问权限、<code>class</code>或<code>interface</code>的属性.对于每一个可以设置标志,下表都有解释:</p><p>| Flag Name        | Value           | Interpretation  |<br>| :————–: | :————-: | :————-: |<br>| ACC_PUBLIC       | 0x0001 |<code>public</code>声明：可以在其他<code>package</code>下访问  |<br>| ACC_FINAL        | 0x0010          | <code>final</code>声明：不允许有子类      |<br>| ACC_SUPER        | 0x0020 |处理指定的调用<code>invokespecial</code>指令父类方法 |<br>| ACC_INTERFACE    | 0x0200          | 只是一个接口，不是类           |<br>| ACC_ABSTRACT     | 0x0400          | 抽象声明：绝对不能被实例化      |<br>| ACC_SYNTHETIC    | 0x1000          | 合成声明：不在源码中           |<br>| ACC_ANNOTATION   | 0x2000          | 注解类型声明                  |<br>| ACC_ENUM         | 0x4000          | 枚举类型声明                  | </p><ul><li><code>ACC_SYNTHETIC</code> 位被设置，表明它是由<code>compiler</code>生成，并且在源码中不会出现</li><li><code>ACC_ENUM</code> 位被设置，则表明该类或父类为枚举类型</li><li><code>ACC_INTERFACE</code> 位被设置（<code>ACC_ABSTRACT</code>位必须设置，但<code>ACC_FINAL</code>、<code>ACC_SUPER</code>或<code>ACC_ENUM</code>位不能被设置），表明是一个接口而不是类。反之是一个类而不是接口</li><li><code>ACC_ANNOTATION</code> 位被设置（<code>ACC_INTERFACE</code>位必须设置），表明是一个枚举类型<br>如果<code>ACC_INTERFACE</code>标志位没有被设置,那么在表中除了<code>ACC_ANNOTATION</code>标志位外,其他都可以设置.但一个类不能同时有<code>ACC_FINAL</code>和<code>ACC_ABSTRACT</code>标志位被置位</li></ul></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> jsr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSR </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSR总览</title>
      <link href="/2018/navigation-jsr/"/>
      <url>/2018/navigation-jsr/</url>
      <content type="html"><![CDATA[<p><a href="https://jcp.org/en/jsr/all" target="_blank" rel="noopener">JSR</a> - Java Specification Requests是指向<a href="https://www.jcp.org/en/home/index" target="_blank" rel="noopener">JCP</a> - Java Community Process提出新增一个标准化技术规范的正式请求，是Java平台的重要组成部分。本篇是一个概览并导航到具体的JSR</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ul><li><a href="jsr-classfile.md">JSR202 - Class File</a></li></ul>]]></content>
      
      <categories>
          
          <category> jsr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSR </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim的使用</title>
      <link href="/2018/vim-usage/"/>
      <url>/2018/vim-usage/</url>
      <content type="html"><![CDATA[<p>收集了Vim的手册、基本配置和插件的使用</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>包含通用的设置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"显示行号</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"自动缩进</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"统一缩进为4</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"上一行对齐格式应用到下一行</span></span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment">"智能对齐</span></span><br><span class="line"><span class="keyword">set</span> smartindent</span><br><span class="line"></span><br><span class="line"><span class="comment">"TAB键的宽度</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">"搜索忽略大小写</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"><span class="comment">"编码设置</span></span><br><span class="line"><span class="keyword">set</span> enc=utf-<span class="number">8</span><span class="comment">"VIM内部使用编码,全名encoding</span></span><br><span class="line"><span class="keyword">set</span> fenc=utf-<span class="number">8</span><span class="comment">"VIM解析出来的当前文件编码,可能会解析错误,全名fileencoding</span></span><br><span class="line"><span class="keyword">set</span> fencs=ucs-bom,utf-<span class="number">8</span>,cp938,gb18030,big5,latin1<span class="comment">"VIM解析错误则用这个来猜测，全名fileencodings</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">"防止粘贴格式散乱</span></span><br><span class="line"><span class="keyword">set</span> paste</span><br></pre></td></tr></table></figure><h2 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h2><p><img src="/images/vim-shortcutKey.jpg" alt=""></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2>]]></content>
      
      <categories>
          
          <category> editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Usage </tag>
            
            <tag> Editor </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/singleton/"/>
      <url>/2018/singleton/</url>
      <content type="html"><![CDATA[<p>单例模式保证内存中某个资源只有一份。但如果有懒加载的要求并且Java中的多线程安全性问题、Java存在反射/序列化/克隆等攻击方式，于此便有了如饿汉式、懒汉式和双重校验锁等解决方案。针对每种解决方案分析了其优缺点和介绍了如何进行反射、序列化、克隆方式攻击</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><ol><li>优点：线程安全</li><li>缺点：<ul><li>没有延迟加载</li><li>并不能防止反射、克隆、序列化对单例模式的破坏</li></ul></li><li>分析：通过ClassLoader的loadClass(String, boolean)方法内的synchronized块保证原子性，可见性，有序性来保证线程安全<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><ol><li>优点：延迟加载</li><li>缺点：<ul><li>线程不安全，多线程环境下不能使用</li><li>并不能防止反射、克隆、序列化对单例模式的破坏<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h2><p>注: <code>volatile</code>在jdk1.5及以上才能正常工作</p><ol><li>优点：延迟加载,线程安全</li><li>缺点：并不能防止反射、克隆、序列化对单例模式的破坏</li><li><p>分析：<code>getInstance()</code>变化不用说。择重说明为什么<code>instance</code>必须要用<code>volatile</code>关键字修饰</p><ul><li><code>volatile</code><ul><li>保证可见性<ul><li>当写一个<code>volatile</code>变量时,<code>JMM</code>把该线程对应的工作内存中的共享变量值刷新到主内存</li><li>当读一个<code>volatile</code>变量时,<code>JMM</code>把该线程对应的工作内存置为无效</li></ul></li><li>防止重排序：通过插入内存屏障指令</li></ul></li><li><p><code>new</code> 关键字并不是一个原子操作，可分为四步(只是举例)：</p><ol><li>栈内存开辟空间给引用</li><li>堆内存开辟空间准备初始化对象</li><li>初始化对象</li><li><p>栈中引用指向堆内存空间地址</p><p>在这期间可能会发生指令重排序如1,2,4,3.当执行完4时getInstance()就返回了,别的线程使用时会抛出空指针异常.然后利用volatile的防止指令重排序的功能使其完善</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ol><li>优点：延迟加载，线程安全</li><li>缺点：并不能防止反射、克隆、序列化对单例模式的破坏</li><li>分析: <ul><li>线程安全实现同上</li><li>延迟加载利用类的初始化时机(遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时)：<ul><li>使用<code>new</code>创建类的实例</li><li>访问<code>static</code>字段(<code>static final</code>在编译期替换，不会触发类加载)或<code>static</code>方法</li><li>反射调用类</li><li>初始化子类时，父类还没有初始化，则先初始化父类</li><li><code>main</code>所在的类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ol><li>优点：线程安全，可防止反射，序列化，克隆对单例模式的破坏</li><li>缺点：不能懒加载</li><li>分析：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h2><ul><li><p>破坏方式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 正常方式获得实例</span></span><br><span class="line">    Singleton instance = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射重新生成实例</span></span><br><span class="line">    Constructor&lt;Singleton&gt; constructor = Singleton.class.getDeclaredConstructor();</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Singleton newInstance = constructor.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看是否相等</span></span><br><span class="line">    System.out.println(instance);</span><br><span class="line">    System.out.println(newInstance);</span><br><span class="line">    System.out.println(instance.equals(newInstance));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应对方式:</p><h2 id="克隆攻击"><a href="#克隆攻击" class="headerlink" title="克隆攻击"></a>克隆攻击</h2></li><li>克隆要求类实现<code>Serializable</code>接口，不实现该接口进行序列化时会抛出<code>java.lang.CloneNotSupportedException</code>异常</li><li>当实现<code>Cloneable</code>接口重写<code>clone()</code>后就可以破坏单例模式</li><li>应对方式<ul><li>不实现<code>Cloneable</code>接口</li><li>实现<code>Cloneable</code>接口方法的同时按照下面方式重写<code>clone()</code>方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    <span class="comment">// 返回同一个实例</span></span><br><span class="line">    <span class="keyword">return</span> getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或抛出异常，但并不推荐</span></span><br><span class="line">    <span class="comment">// throw new CloneNotSupportedException();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="序列化攻击"><a href="#序列化攻击" class="headerlink" title="序列化攻击"></a>序列化攻击</h2><ul><li><p>前提</p><ul><li>序列化要求类实现<code>Serializable</code>接口，不实现该接口进行序列化时会抛出<code>java.io.NotSerializableException</code>异常</li><li>当实现<code>Serializable</code>接口后就可以破坏单例模式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(Files.newOutputStream(Paths.get(<span class="string">"C:/Users/leo/Desktop/file"</span>)));</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(Files.newInputStream(Paths.get(<span class="string">"C:/Users/leo/Desktop/file"</span>)))) &#123;</span><br><span class="line">        oos.writeObject(Singleton.getInstance());</span><br><span class="line">        Singleton instance = (Singleton) ois.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(Singleton.getInstance().equals(instance));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>应对方式</p><ul><li>不实现<code>Serializable</code>接口</li><li>实现<code>Serializable</code>接口的同时，添加下列方法(在反序列化的时候会自动调用该方法)  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 直接返回同一个实例</span></span><br><span class="line">    <span class="keyword">return</span> getInstance();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 或抛出异常,但并不推荐</span></span><br><span class="line">    <span class="comment">// throw new NotSerializableException();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> design pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Basic </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式</title>
      <link href="/2018/design-pattern/"/>
      <url>/2018/design-pattern/</url>
      <content type="html"><![CDATA[<p>本篇是关于设计模式（Design Pattern）的概览，本博客关于设计模式文章都使用Java语言来描述</p><h2 id="OO设计原则"><a href="#OO设计原则" class="headerlink" title="OO设计原则"></a>OO设计原则</h2><p>面向对象（<code>Object Oriented</code>简写<code>OO</code>）六大设计原则</p><ul><li><code>SRP</code> (<code>Single Responsibility Principle</code>，单一职责原则)</li><li><code>OCP</code> (<code>Open Closed Principle</code>，开闭原则)</li><li><code>LSP</code> (<code>Liskov Substitution Principle</code>，里氏替换原则)</li><li><code>DIP</code> (<code>Dependence Iversion Principle</code>，依赖倒置原则)</li><li><code>ISP</code> (<code>Interface Segregation Principle</code>，接口隔离原则)</li><li><code>LOD</code> (<code>Low Of Principle</code>，迪米特原则)</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><ul><li><a href="../singleton">单例模式</a></li></ul>]]></content>
      
      <categories>
          
          <category> design pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Basic </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Hexo的搭建博客</title>
      <link href="/2018/hexo-usage/"/>
      <url>/2018/hexo-usage/</url>
      <content type="html"><![CDATA[<p>Hexo使用<code>Markdown</code>解析文章，其<a href="https://hexo.io/" target="_blank" rel="noopener">官网</a>提供许多<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">插件</a>、<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>来生成静态页面。下面的使用参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方中文文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要提前安装好<code>Node.js</code>、<code>Git</code>，<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli     <span class="comment"># 安装hexo-cli命令行</span></span><br><span class="line">hexo init blog-with-hexo    <span class="comment"># 初始化一个hexo项目</span></span><br><span class="line"><span class="built_in">cd</span> ./blog-with-hexo         <span class="comment"># 进入hexo项目</span></span><br><span class="line">npm install                 <span class="comment"># 安装相应的模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## 下面的根据实际情况</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">npm install hexo-deployer-git --save        <span class="comment"># 安装git部署模块</span></span><br><span class="line">npm install hexo-generator-search --save    <span class="comment"># 安装搜索模块</span></span><br></pre></td></tr></table></figure></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>有许多<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>，下面介绍一款主题 – <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant-hexo</a><br>要使用主题必须在全局的<code>_config.yml</code>中启用主题</p><ul><li><p>下载 </p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line">npm install hexo-renderer-pug --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure></li><li><p>配置</p><ul><li>在全局<code>_config.yml</code>的配置国际化 <code>language: zh-CN</code></li><li><p>启用站内搜索</p><ul><li><p>在全局<code>_config.yml</code>的配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">    field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>themes/maupassant/_config.yml</code>中配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_search:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">baidu_search:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">self_search:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>菜单的<code>about</code><br>  使用<code>hexo new page about</code> 并生成<code>source/about/index.md</code>，编辑该文档</p></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Usage </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis的用法</title>
      <link href="/2018/mybatis-usage/"/>
      <url>/2018/mybatis-usage/</url>
      <content type="html"><![CDATA[<p>记录MyBatis的用法如配置文件的内容、使用接口代理开发、动态SQL的各种标签等。详情参考<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">官方中文文档</a></p><h2 id="接口代理开发"><a href="#接口代理开发" class="headerlink" title="接口代理开发"></a>接口代理开发</h2><ul><li>开发流程：Mapper接口开发方法只需要编写Mapper接口(相当于以前的dao接口)，由MyBatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体调用dao接口实现类的方法。</li><li>Mapper接口开发需要遵循以下规范:<ul><li><code>mapper.xml</code>文件中的<code>namespace</code>与 接口的 类路径相同</li><li><code>Mapper</code>接口方法的输入参数类型和<code>mapper.xml</code>中定义的每个sql的<code>parameterType</code> 的类型相同</li><li><code>Mapper</code>接口方法的输入参数类型和<code>mapper.xml</code>中定义的每个sql的<code>parameterType</code>的类型相同</li><li><code>Mapper</code>接口方法的输出参数类型和<code>mapper.xml</code>中定义的每个sql的<code>resultType</code>的类型相同</li></ul></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><p><code>mybatis-config.xml</code>配置内容(有顺序，如下列出的顺序书写)</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. properties 属性</span><br><span class="line">2.<span class="built_in"> settings </span>设置</span><br><span class="line">3. typeAliases 类型别名</span><br><span class="line">4. typeHandlers 类型处理器</span><br><span class="line">5. objectFactory 对象工厂</span><br><span class="line">6. plugins 插件</span><br><span class="line">7. environments 环境</span><br><span class="line">        environment 环境变量</span><br><span class="line">            transactionManger 事务管理器</span><br><span class="line">            dataSource 数据源</span><br><span class="line">8. databaseldProvider 数据库厂商标志符</span><br><span class="line">9. mappers 映射器</span><br></pre></td></tr></table></figure></li><li><p><code>properties</code>引入外部配置文件</p><ul><li><code>&lt;properties resource=&quot;classpath:jdbc.properties&quot;/&gt;</code></li></ul></li><li><p><code>settings</code>配置mybatis全局参数：如开启缓存、延迟加载等全局开关</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- name： 全局开关属性名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- value：全局开关属性值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启缓存，只是全局开关，还需要在mapper.xml下使用 &lt;cache/&gt; 标签开启 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启延迟加载，sql语句的分步查询(一条SQL语句改写成多条SQL，通过association关联) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使用日志，日志加载顺序方式如下:</span></span><br><span class="line"><span class="comment">            SLF4J</span></span><br><span class="line"><span class="comment">            Apache Commons Logging</span></span><br><span class="line"><span class="comment">            Log4j 2</span></span><br><span class="line"><span class="comment">            Log4j</span></span><br><span class="line"><span class="comment">            JDK logging </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用 log4j2 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J2"</span>/&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 启用驼峰映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>typeAliases</code>定义别名</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        typeAlias 定义单个别名，每次只能定义一个</span></span><br><span class="line"><span class="comment">        type 指定实体路径</span></span><br><span class="line"><span class="comment">        alias 别名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.leo.mybatis.domain.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- package批量扫描包定义别名，实体类名为大小写都可以。扫描多个路径时使用逗号(,)分割 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span>  <span class="attr">name</span>=<span class="string">"com.leo.mybatis.vo,com.leo.mybatis.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>typeHandlers</code>通常mybatis的 <code>typeHandler</code>完成jdbc类型和Java类型的转换</p></li><li><p><code>mappers</code>引入mapper.xml映射文件</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一个一个文件的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"sqlMap/user.xml"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 批量扫描接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com。leo.mybatis.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MyBatis缓存(总共有两级缓存)</p><ul><li>Mybatis执行查询sql时，首先去缓存中查找，如果命中直接返回，没有命中执行sql从数据库中查询</li><li>一级缓存的作用域是<code>Session</code>，当<code>openSession()</code>后，如果执行相同的sql语句，Mybatis不会执行sql语句，而是从缓存中命中返回。当执行<code>insert/update/delete</code>会刷新缓存，并且一级缓存不能禁用但可以清空使用<code>sqlsession.clearCache()</code></li><li><p>二级缓存的作用域为<code>mapper</code>的<code>namespace</code>，同一个<code>namespace</code>执行的sql会缓存在二级缓存中，须要满足缓存对象能序列化(<code>Serializable</code>)。二级缓存默认是关闭的，需要手动开启</p><ul><li><p>开启方法(在全局配置文件中)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">          </span><br><span class="line"><span class="comment">&lt;!-- 开启缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启按需加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在mapper配置文件中要开启</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="主键增长"><a href="#主键增长" class="headerlink" title="主键增长"></a>主键增长</h3><p><code>useGeneratedKeys</code>实现方式是调用JDBC中Statement的getGeneratedKeys()</p><ul><li><p>MySQL</p><ul><li><p>使用自动回写</p><ul><li><code>useGeneratedKeys</code>表示主键自增后自动回写id</li><li><code>keyColumn</code>表示数据库表中的字段</li><li><code>keyProperty</code>表示实体类中的属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    insert into user(username,phonm) values(#&#123;username&#125;,#&#123;phone&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用MySQL函数<code>LAST_INSERT_ID()</code></p><ul><li><code>selectKey</code>实现自增主键返回</li><li><code>keyProperty</code>返回值对应pojo里面的属性</li><li><code>order</code>表示id生成的顺序,由于MYSQL主键生成是在sql语句执行之后再进行设置,所以设置成after</li><li><code>resultType</code>主键返回类型</li><li><code>LAST_INSERT_ID()</code>是MYSQL函数,返回<code>auto_increment</code>自增id值<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"after"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select LAST_INSERT_ID()</span><br><span class="line">        insert into user(id,username,phone) values(#&#123;id&#125;,#&#123;username&#125;,#&#123;phone&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用<code>uuid</code>实现主键自增<br>  MySQL的<code>uuid</code>生成必须在执行<code>insert</code> 之前进行，因为后面需要获取<code>uuid</code>的属性值进行表的插入</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"before"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">        select uuid()</span><br><span class="line">insert insto user(id,username) values(#&#123;id&#125;,#&#123;username&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Oracle<br>  Oracle自增主键是序列化自增类型，需要<code>before</code></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"befor"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select 序列.nextVal from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user(id,username) values(#&#123;id&#125;,#&#123;username&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="where"><a href="#where" class="headerlink" title="where"></a><code>where</code></h3><p>对应SQL语句中的<code>where</code>条件。MyBatis会去掉最后一个<code>and</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态添加条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id精确查找 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用户名模糊查找 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">            and name like '%$&#123;name&#125;%'</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a><code>resultMap</code></h3><p><code>resultMap</code>可以完成sql查询出来的类名与实体之间的复杂映射<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- autoMapping="true" 开启自动映射(当表的列和类的属性相同时不用写) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"resultMapPerson"</span>  <span class="attr">type</span>=<span class="string">"com.leo.mybatis.User"</span> <span class="attr">autoMapping</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        id 代表主键</span></span><br><span class="line"><span class="comment">        column sql查询字段名(可以是别名)</span></span><br><span class="line"><span class="comment">        property 实体类型名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 普通类型字段映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span>                </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">rersultMap</span>=<span class="string">"resultMapPerson"</span>&gt;</span></span><br><span class="line">    select id,username,birthday from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="include"><a href="#include" class="headerlink" title="include"></a><code>include</code></h3><p>将重复的sql提取出来，使用<code>include</code>引用即可，最终达到sql重用的目的(引用其他名称空间的sql片段，需要在引入时加上名称空间)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumn"</span>&gt;</span></span><br><span class="line">    id,username,birthday</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumn"</span>/&gt;</span> from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a><code>foreach</code></h3><p>向SQL传递数组或List<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种方法、在user对象定义一个 List&lt;Integer&gt; ids,并生成get/set。在 foreach 标签中 collection 表示类中的ids集合。最终生成的sql语句包含 id in(....) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids != null and ids.size &gt; 0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"id in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                #&#123;id&#125; </span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种方法、直接传递 List 对象，批量删除时有用。 此时的parameterType必须为java.util.List，if的test和foreach的collections必须为list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"list != null and list.size &gt; 0"</span>&gt;</span></span><br><span class="line">            and id in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><p>更新操作动态选择条件。MyBatis回去掉最后一个<code>,</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set 标签自动将 set 最后一个删掉 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    update user </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">            name=#&#123;name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null and phone != ''"</span>&gt;</span></span><br><span class="line">            phone=#&#123;phone&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="chooes"><a href="#chooes" class="headerlink" title="chooes"></a><code>chooes</code></h3><p><code>chooes when otherwise</code> 当某个条件满足则加上该条件，否则加上另外的条件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">chooes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">                and id=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                name='%$&#123;name&#125;%'</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">chooes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><ul><li><p><code>association</code>一对一关联关系</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- (新建类)添加OrdersCustomer类，继承Orders，并添加User类型成员变量 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有的订单及其相关的下单人 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"findAllMapper"</span> <span class="attr">type</span>=<span class="string">"ordersCustomer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- orders表和Orders类映射。column 数据库表中查出来的字段(有别名,则以别名为准)，property类中的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 关联的下单用户映射。association表示关联查询的单条记录。type 表示数据库中的表。javaType表示类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">type</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"findAllMapper"</span>&gt;</span></span><br><span class="line">    select orders.*,user.id as userid,orders.* from user,orders where orders.user_id = user.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>collection</code> 一对多查询</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过Id查找用户及相应的订单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"findUserAndOrdersByUserIdMapper"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orders"</span> <span class="attr">ofType</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"ordersid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndOrdersByUserId"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"findUserAndOrdersByUserIdMapper"</span>&gt;</span></span><br><span class="line">    select user.*,orders.id as ordersid, orders.* from user,orders where user.id=orders.user_id and user.id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Usage </tag>
            
            <tag> SQL </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
